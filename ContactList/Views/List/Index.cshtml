@model Data.Domain.Contact

@{
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}
@section styles {
    <style>
        .help-inline {
            font-size: 11px;
            color: red;
        }

        .form-horizontal .form-control {
            display: inline-block;
            margin-left: 5px;
        }

        .form-horizontal .control-label {
            min-width: 100px;
        }

        .container-table {
            display: table;
        }

        .vertical-center-row {
            display: table-cell;
            vertical-align: middle;
        }

        .form-contol:focus {
            border-color: red;
            outline: 0;
            box-shadow: none;
        }

        .form-contol-group {
            margin-bottom: 25px;
        }
    </style>}
@section scripts{
    <script>
        $(document).ready(function () {
            init2();
            $("#btndialoge").click(function () {
                debugger;
            });
            $("#signupform").submit(function (e) {
                debugger;
                var url = "/api/Contacts//PostContact"; // the script where you handle the form input.
                $.ajax({
                    type: "POST",
                    url: url,
                    data: $("#signupform").serialize(), // serializes the form's elements.
                    success: function (data) {
                        alert(data); // show response from the php script.
                    }
                });

                e.preventDefault(); // avoid to execute the actual submit of the form.
            });
            $("#btn1").click(function () {
                debugger;
                $("#signupform .form-contol-group").each(function () {
                    $(this).removeClass('has-error');
                    $(this).find(".help-inline").text("");
                    $(this).find("input[type=text],input[type=email]").val("");
                });
            });
        });
        function GetAllEmployees() {
            jQuery.support.cors = true;
            $.ajax({
                url: '/api/Contacts/GetContacts',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    debugger;
                    var item;
                    $('#grps2').jqGrid('clearGridData');
                    for (var i = 0; i <= data.length; i++) {
                        item = data[i];
                        item.Title = item.FirstName + ' ' + item.LastName;
                        $("#grps2").jqGrid('addRowData', i + 1, item);
                    }
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
   
        var mydata = [
            {
                id: "1",
                Title: "Sivaraman Soundararajan",
                FirstName: "Sivaraman",
                LastName: "Soundararajan",
                Address: {
                    Street: "1/332 AdiyaPadam Street,N.G.G.O Colony,Coimbatore,TamilNadu,600042",
                    City: "Coimbatore",
                    State: "TamilNadu",
                    ZipCode: "600042",
                    Phone: "9976302702",
                    Email: "sivaramankj@gmail.com",
                    Notes: ""
                }
            }
        ];
                function init2() {
            jQuery("#grps2").jqGrid({
                url: '/api/Contacts/',
                mtype: 'GET',
                datatype: "json",
                height: 'auto',
                autowidth: true,
                shrinkToFit: true,
                colNames: [
                    'ID', 'Title', 'First Name', 'Last Name', 'Street', 'City', 'State', 'ZipCode', 'Phone', 'Email'
                ],
                colModel: [
                    {
                        name: 'ContactId',
                        index: 'ContactId',
                        width: 30,
                        sorttype: 'int'
                    },
                    { name: 'Title', index: 'Title', width: 200, editable: false },
                    {
                        name: 'FirstName',
                        index: 'FirstName',
                        width: 100,
                        hidden: true,
                        editable: true,
                        editrules: { edithidden: true }
                    },
                    {
                        name: 'LastName',
                        index: 'LastName',
                        width: 100,
                        hidden: true,
                        editable: true,
                        editrules: { edithidden: true }
                    },
                    { name: 'Address.Street', index: 'name', width: 300, editable: true },
                    { name: 'Address.City', index: 'City', width: 100, editable: true },
                    { name: 'Address.State', index: 'State', width: 100, editable: true },
                    { name: 'Address.Zip', index: 'Zip', width: 100, editable: true },
                    { name: 'Phone', index: 'Phone', width: 100, editable: true },
                    { name: 'Email', index: 'Email', width: 100, editable: true }
                ],
                jsonReader: {
                    root: "Contact",
                    page: "page",
                    total: "total_pages",
                    records: "records",
                    repeatitems: false
                },
                beforeProcessing: function (data) {
                    var i, rows = data.Contact, l = rows.length, item;
                    for (i = 0; i < l; i++) {
                        item = rows[i];
                        item.Title = item.FirstName + " " + item.LastName;
                    }
                },
                rowNum: 5,
                rowList: [5,10, 15, 20,25],
                pager: '#pgrps2',
                loadonce: false,
                sortable: true,
                viewrecords: true,
                sortorder: "desc",
                caption: "Contacts",
                hidegrid: false,
                altRows: false
            });
            //$('#grid').setGridParam({url:'http://localhost:8888/xxx/abc?.....e&#39;});
            //$('#grid').trigger("reloadGrid");
            //<span class="glyphicon glyphicon-align-left" aria-hidden="true"></span>
            jQuery("#grps2").jqGrid('navGrid', '#pgrps2', { add: true, edit: true, del: true },
                    updateDialog('PUT'),
                    updateDialog('POST'),
                    updateDialog('DELETE')
            );
            jQuery("#grps2").jqGrid('setLabel', 'myColName', '<img src=images/my-image.png width=16 height=16>');
            $('#grps2').jqGrid('clearGridData');
            // $('#grps2').trigger('reloadGrid');
            //for (var i = 0; i <= mydata.length; i++) {
            //    $("#grps2").jqGrid('addRowData', i + 1, mydata[i]);
        }

        function updateDialog(action) {
            return {
                url: "/api/Contacts/"
                , closeAfterAdd: true
                , closeAfterEdit: true
                , afterShowForm: function (formId) { }
                , modal: true
                , onclickSubmit: function (params) {
                    var list = $("#grps2");
                    var selectedRow = list.getGridParam("selrow");
                    rowData = list.getRowData(selectedRow);
                    if (rowData.ContactId) params.url += rowData.ContactId;
                    else params.url += '-1';
                    params.mtype = action;
                }
                , width: "300"
            };
        }
    </script>}
@*<button type="button" class="btn btn-primary" id="btndialoge">Open Model</button>
<button type="button" class="btn btn-info btn-lg" data-toggle="modal" id="btn1" data-target="#myModal">Open Modal</button>*@
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">New Contact</h4>
            </div>
            <div class="modal-body">
                <div class="container" style="width:100%">
                    @*@Html.ValidationSummary(string.Empty, new {@class = "alert alert-danger"})*@
                    @using (Html.BeginForm("Index", "test", FormMethod.Post, new { @class = "form-horizontal", id = "signupform" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "help-inline" })
                        </div>

                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "help-inline" })
                        </div>
                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Address.Street, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Address.Street, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address.Street, "", new { @class = "help-inline" })
                        </div>
                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "help-inline" })
                        </div>

                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Address.City, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Address.City, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address.City, "", new { @class = "help-inline" })
                        </div>
                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Address.State, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Address.State, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address.State, "", new { @class = "help-inline" })
                        </div>
                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Address.Zip, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Address.Zip, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address.Zip, "", new { @class = "help-inline" })
                        </div>

                        <div class="form-contol-group">
                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "help-inline" })
                        </div>
                        <div class="form-contol-group" style="-ms-align-content: center -webkit-align-content:center align-content:center">
                            <div>
                                <input type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>
</div>
<div class="panel panel-default">
    <div class="panel-body">
        <table id="grps2"><tr><td>&nbsp;</td></tr></table>
        <div id="pgrps2"></div>
    </div>
</div>
